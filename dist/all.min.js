(function(ng){ng.module("Playlitics.Data",[])}).call(this,angular),function(ng){ng.module("Playlitics.Data").service("Permalink",function(){this.create=function(name){var safe=name.replace(/[\s_]+/g,"-").replace(/[^a-zA-Z\-]/g,"").toLowerCase();return safe}})}.call(this,angular),function(){"use strict";angular.module("Playlitics.Data").service("Spotify",["$http",function($http){var settings={};settings.API_ENDPOINT="http://ws.spotify.com/search/1/track.json",this.search=function(q){return delete $http.defaults.headers.common["X-Requested-With"],$http.get(settings.API_ENDPOINT+"?q="+this.safeQuery(q))},this.safeQuery=function(q){return encodeURI(q)}}])}.call(this,angular),function(ng){"use strict";function StoreNotFoundError(msg){this.name="StoreNotFound",this.message=msg,this.stack=(new Error).stack}StoreNotFoundError.prototype=new ReferenceError,ng.module("Playlitics.Data").service("Store",function($window,$q){var Store=$window.localStorage||$window.webkitLocalStorage||$window.mozLocalStorage||{};this._storage=Store,this.fetch=function(storeName){var d=$q.defer(),store=Store[storeName];return"undefined"==typeof store?d.reject(new StoreNotFoundError("Error: No store exists with name "+storeName)):d.resolve(this.deserialize(Store[storeName])),d.promise},this.deserialize=function(data){return ng.fromJson(data)},this.serialize=function(data){return ng.toJson(data)},this.persist=function(storeName,data){var d=$q.defer();return d.resolve(Store[storeName]=this.serialize(data)),d.promise}})}.call(this,angular),function(ng){"use strict";ng.module("Playlitics.Filters",[])}.call(this,angular),function(ng){"use strict";ng.module("Playlitics.Filters").filter("percent",function(){return function(input){return input?Number(100*input).toPrecision(4)+"%":"0%"}})}.call(this,angular),function(ng){"use strict";ng.module("Playlitics.Filters").filter("duration",function(){return function(input){var minutes=Math.floor(input/60),seconds=Math.floor(input)%60;return minutes+":"+("0"+seconds).slice(-2)}})}.call(this,angular),function(ng){"use strict";ng.module("Playlitics.DOM",[])}.call(this,angular),function(ng){"use strict";ng.module("Playlitics.DOM").directive("spotifySearch",function($rootScope){return{restrict:"E",transclude:!0,templateUrl:"views/spotifysearch.html",controller:"SpotifySearchCtrl",link:function(scope){scope.onSearchChange=function(){var q=scope.sq;return q?void scope.runSearch(q):scope.tracks=[]},$rootScope.$on("trackSelected",function(){scope.sq=""}),scope.$watch("sq",scope.onSearchChange)}}})}.call(this,angular),function(ng){"use strict";ng.module("Playlitics.DOM").directive("trackList",function($parse,$rootScope){return{restrict:"EA",templateUrl:"views/tracklist.html",link:function(scope,el,attr){var trackSelectCallback=$parse(attr.onTrackSelect)(scope);scope.trackSelect=function(track){$rootScope.$broadcast("trackSelected",track),trackSelectCallback(track)}}}})}.call(this,angular),function(ng){"use strict";var app=ng.module("Playlitics",["ui.router","ngRepeatReorder","Playlitics.Data","Playlitics.DOM","Playlitics.Filters"]);app.config(function($stateProvider,$urlRouterProvider){$stateProvider.state("playlists",{"abstract":!0,template:"<ui-view />"}).state("playlists.index",{url:"/",templateUrl:"views/selectplaylist.html"}).state("playlists.details",{url:"/:permalink",templateUrl:"views/playlist.html",controller:"PlaylistCtrl"}),$urlRouterProvider.otherwise("/")})}.call(this,angular),function(ng){ng.module("Playlitics").controller("PlaylistCtrl",function($scope,$state,$stateParams,Permalink){$scope.playlist=$scope.playlists.reduce(function(buff,curr){return Permalink.create(curr.name)===$stateParams.permalink?curr:buff},null),$scope.addtrack=function(track){$scope.playlist.tracks.push(track)},$scope.removeTrack=function(track){var trackIndex=$scope.playlist.tracks.indexOf(track);$scope.playlist.tracks.splice(trackIndex,1)},$scope.removeTag=function(tag){var tagIndex=$scope.playlist.tags.indexOf(tag);$scope.playlist.tags.splice(tagIndex,1)}})}.call(this,angular),function(ng){"use strict";ng.module("Playlitics").controller("PlaylistsCtrl",function($scope,Store,Permalink){function __createPlaylist(){return{name:"",route:"",tags:[],tracks:[]}}function __persistPlaylists(){Store.persist(STORE_NAME,$scope.playlists)}var STORE_NAME="playlists";$scope.playlists=[],$scope.nextPlaylist=__createPlaylist(),$scope.addPlaylist=function(playlist){playlist&&playlist.name&&($scope.playlists.forEach(function(list){if(Permalink.create(list.name)===Permalink.create(playlist.name))throw new Error("Playlist with name "+list+" already exists")}),$scope.playlists.push(playlist),$scope.nextPlaylist=__createPlaylist())},$scope.removePlaylist=function(playlist){var index=$scope.playlists.indexOf(playlist);playlist.destroyed=!0,$scope.playlists.splice(index,1)},$scope.loadPlaylists=function(store){Store.fetch(store).then(function(data){$scope.playlists=data})},$scope.getPermalink=function(name){return Permalink.create(name)},$scope.getCoolnessFactor=function(playlist){var coolness=playlist.tracks.reduce(function(total,track){return total+track.length*track.popularity},0);return coolness/$scope.getDuration(playlist)},$scope.getDuration=function(playlist){return playlist.tracks.reduce(function(total,track){return total+track.length},0)},$scope.loadPlaylists(STORE_NAME),$scope.$watch("playlists",__persistPlaylists,!0)})}.call(this,angular),function(ng){"use strict";ng.module("Playlitics").controller("SpotifySearchCtrl",function($scope,Spotify){$scope.tracks=[],$scope.runSearch=function(q){Spotify.search(q).then(function(response){delete $scope.error,$scope.tracks=response.data.tracks}).catch(function(error){console.debug(error),$scope.error=error})}})}.call(this,angular);